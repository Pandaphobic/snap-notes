[{"/home/chris/snap-notes/src/index.js":"1","/home/chris/snap-notes/src/App.js":"2","/home/chris/snap-notes/src/reportWebVitals.js":"3","/home/chris/snap-notes/src/components/Ticket.js":"4","/home/chris/snap-notes/src/components/Outages.js":"5","/home/chris/snap-notes/src/components/Footer.js":"6"},{"size":500,"mtime":1607195160352,"results":"7","hashOfConfig":"8"},{"size":630,"mtime":1607389330784,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607195160352,"results":"10","hashOfConfig":"8"},{"size":2852,"mtime":1607387996944,"results":"11","hashOfConfig":"8"},{"size":106,"mtime":1607203025852,"results":"12","hashOfConfig":"8"},{"size":425,"mtime":1607389454804,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"qug6wv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/home/chris/snap-notes/src/index.js",[],["30","31"],"/home/chris/snap-notes/src/App.js",[],"/home/chris/snap-notes/src/reportWebVitals.js",[],"/home/chris/snap-notes/src/components/Ticket.js",["32","33"],"import React from \"react\"\nimport { Container, Row, Col, Form, Button, InputGroup, FormControl } from \"react-bootstrap\"\n\nconst fontWeight = {\n  fontWeight: \"600\"\n}\n\nfunction Ticket() {\n  let handleClear = () => {\n    document.querySelectorAll(\"input\").forEach(input => (input.value = \"\"))\n    document.querySelector(\"textarea\").value = \"\"\n  }\n\n  let handleFlip = () => {\n    let raw\n    let fullname = []\n    let nameInput = document.querySelector(\"#fullname\")\n    raw = nameInput.value\n\n    // Look for the separating Character and remove spaces\n    // Expected input is either Lastname, Firstname or Firstname Lastname\n    if (raw.includes(\",\")) {\n      fullname = raw.split(\",\")\n      // Remove spaces\n      let fixedName = fullname.map(name => {\n        return name.trim()\n      })\n      nameInput.value = `${fixedName[1]} ${fixedName[0]}`\n    } else {\n      fullname = raw.split(\" \")\n      // Remove spaces\n      let fixedName = fullname.map(name => {\n        return name.trim()\n      })\n      let outputName = fixedName.filter(name => name != \"\")\n      nameInput.value = `${outputName[1]}, ${outputName[0]}`\n    }\n  }\n  return (\n    <Container className=\"w-75\">\n      <br />\n      <Row className=\"mb-2\">\n        <Col>\n          <Form.Label>User ID</Form.Label>\n          <Form.Control style={fontWeight} type=\"text\" placeholder=\"user id\" />\n        </Col>\n        <Col>\n          <Form.Label>Phone Number</Form.Label>\n          <Form.Control style={fontWeight} type=\"text\" placeholder=\"xxx-xxx-xxxx ext xxxx\" />\n        </Col>\n      </Row>\n\n      <Row className=\"mb-2\">\n        <Col>\n          <Form.Label>Previous Ticket</Form.Label>\n          <Form.Control style={fontWeight} type=\"text\" placeholder=\"INCXXXXXXX\" />\n        </Col>\n        <Col>\n          <Form.Label>Advisor Code</Form.Label>\n          <Form.Control style={fontWeight} type=\"text\" placeholder=\"code\" />\n        </Col>\n      </Row>\n      {/* Full Name Section */}\n      <Row className=\"mb-2\">\n        <Col>\n          <Form.Label>Full Name</Form.Label>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <Button onClick={handleFlip} variant=\"outline-secondary\">\n                <i class=\"fas fa-sync-alt\"></i>\n              </Button>\n            </InputGroup.Prepend>\n            <Form.Control id=\"fullname\" style={fontWeight} type=\"text\" placeholder=\"Lastname, Firstname\" />\n          </InputGroup>\n        </Col>\n      </Row>\n\n      <Row className=\"w-100 m-auto\">\n        <Form.Label>Quick Notes</Form.Label>\n        <Form.Control style={fontWeight} as=\"textarea\" rows={3} />\n      </Row>\n      <Row className=\"mb-2\">\n        <Button style={fontWeight} onClick={handleClear} className=\"btn-block btn-info m-3\">\n          Clear All <i className=\"fas fa-eraser\"></i>\n        </Button>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Ticket\n",["34","35"],"/home/chris/snap-notes/src/components/Outages.js",[],"/home/chris/snap-notes/src/components/Footer.js",["36"],"import React, { useEffect } from \"react\"\nimport metadata from \"../metadata.json\"\n\nlet footerStyle = {\n  display: \"fixed\",\n  bottom: \"5px\",\n  color: \"white\",\n  zIndex: \"10\"\n}\n\nfunction Footer() {\n  return (\n    <div style={footerStyle}>\n      <div className=\"footer-version\">{`Version ${metadata.buildMajor}.${metadata.buildMinor}.${metadata.buildRevision} ${metadata.buildTag}`}</div>\n    </div>\n  )\n}\n\nexport default Footer\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":57,"nodeType":"43","messageId":"44","endLine":2,"endColumn":68},{"ruleId":"45","severity":1,"message":"46","line":35,"column":54,"nodeType":"47","messageId":"48","endLine":35,"endColumn":56},{"ruleId":"37","replacedBy":"49"},{"ruleId":"39","replacedBy":"50"},{"ruleId":"41","severity":1,"message":"51","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":26},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["52"],["53"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]