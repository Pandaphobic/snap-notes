[{"/home/chris/snap-notes/src/index.js":"1","/home/chris/snap-notes/src/App.js":"2","/home/chris/snap-notes/src/reportWebVitals.js":"3","/home/chris/snap-notes/src/components/Footer.js":"4","/home/chris/snap-notes/src/components/schedule/Schedule.js":"5","/home/chris/snap-notes/src/components/Notes.js":"6","/home/chris/snap-notes/src/components/Navigation.js":"7","/home/chris/snap-notes/src/components/OutageTracker/OutageList.js":"8","/home/chris/snap-notes/src/components/OutageTracker/OutageDetails.js":"9","/home/chris/snap-notes/src/components/OutageTracker/OutageForm.js":"10","/home/chris/snap-notes/src/contexts/OutageContext.js":"11","/home/chris/snap-notes/src/reducers/OutageReducer.js":"12","/home/chris/snap-notes/src/contexts/ScheduleContext.js":"13","/home/chris/snap-notes/src/components/schedule/ScheduleItems.js":"14","/home/chris/snap-notes/src/components/schedule/ScheduleDropBox.js":"15","/home/chris/snap-notes/src/contexts/NotesContext.js":"16"},{"size":582,"mtime":1608214269836,"results":"17","hashOfConfig":"18"},{"size":1305,"mtime":1608214974436,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1607195160352,"results":"20","hashOfConfig":"18"},{"size":285,"mtime":1607901637269,"results":"21","hashOfConfig":"18"},{"size":691,"mtime":1608040765631,"results":"22","hashOfConfig":"18"},{"size":3603,"mtime":1608165818026,"results":"23","hashOfConfig":"18"},{"size":716,"mtime":1608214778916,"results":"24","hashOfConfig":"18"},{"size":948,"mtime":1607898248689,"results":"25","hashOfConfig":"18"},{"size":937,"mtime":1607992603591,"results":"26","hashOfConfig":"18"},{"size":3381,"mtime":1607899057619,"results":"27","hashOfConfig":"18"},{"size":634,"mtime":1607899620999,"results":"28","hashOfConfig":"18"},{"size":518,"mtime":1607899142069,"results":"29","hashOfConfig":"18"},{"size":712,"mtime":1608040354811,"results":"30","hashOfConfig":"18"},{"size":1152,"mtime":1608040888191,"results":"31","hashOfConfig":"18"},{"size":1875,"mtime":1608214142986,"results":"32","hashOfConfig":"18"},{"size":645,"mtime":1608165694426,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s7hdp7",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},"/home/chris/snap-notes/src/index.js",[],"/home/chris/snap-notes/src/App.js",[],"/home/chris/snap-notes/src/reportWebVitals.js",[],["70","71"],"/home/chris/snap-notes/src/components/Footer.js",[],"/home/chris/snap-notes/src/components/schedule/Schedule.js",[],"/home/chris/snap-notes/src/components/Notes.js",["72","73","74","75","76","77","78","79"],"import React, { useState, useEffect, useContext } from \"react\"\nimport { CallerNotesContext } from \"../contexts/NotesContext\"\n\nimport { Container, Row, Col, Form, Button, InputGroup } from \"react-bootstrap\"\n\nconst fontWeight = {\n  fontWeight: \"600\"\n}\n\nfunction Ticket() {\n  const notes = useContext(CallerNotesContext)\n\n  const [callerUserID, setCallerUserID] = useState(\"\")\n  const [callerPhone, setCallerPhone] = useState(\"\")\n  const [callerPrevTicket, setCallerPrevTicket] = useState(\"\")\n  const [advisorCode, setAdvisorCode] = useState(\"\")\n  const [callerName, setCallerName] = useState(\"\")\n  const [callNotes, setCallNotes] = useState(\"\")\n\n  let handleClear = () => {\n    document.querySelectorAll(\"input\").forEach(input => (input.value = \"\"))\n    document.querySelector(\"textarea\").value = \"\"\n  }\n\n  let handleFlip = () => {\n    let raw\n    let fullname = []\n    let nameInput = document.querySelector(\"#fullname\")\n    raw = nameInput.value\n\n    // Look for the separating Character and remove spaces\n    // Expected input is either Lastname, Firstname or Firstname Lastname\n    if (raw.includes(\",\")) {\n      fullname = raw.split(\",\")\n      // Remove spaces\n      let fixedName = fullname.map(name => {\n        return name.trim()\n      })\n      nameInput.value = `${fixedName[1]} ${fixedName[0]}`\n    } else {\n      fullname = raw.split(\" \")\n      // Remove spaces\n      let fixedName = fullname.map(name => {\n        return name.trim()\n      })\n      let outputName = fixedName.filter(name => name !== \"\")\n      nameInput.value = `${outputName[1]}, ${outputName[0]}`\n    }\n  }\n\n  return (\n    <Container className=\"w-75\">\n      <br />\n      <Row className=\"mb-2\">\n        <Col>\n          <Form.Label>User ID</Form.Label>\n          <Form.Control onChange={e => setCallerUserID(e.target.value)} style={fontWeight} type=\"text\" placeholder=\"user id\" />\n        </Col>\n        <Col>\n          <Form.Label>Phone Number</Form.Label>\n          <Form.Control onChange={e => setCallerPhone(e.target.value)} style={fontWeight} type=\"text\" placeholder=\"xxx-xxx-xxxx ext xxxx\" />\n        </Col>\n      </Row>\n\n      <Row className=\"mb-2\">\n        <Col>\n          <Form.Label>Previous Ticket</Form.Label>\n          <Form.Control onChange={e => setCallerPrevTicket(e.target.value)} style={fontWeight} type=\"text\" placeholder=\"INCXXXXXXX\" />\n        </Col>\n        <Col>\n          <Form.Label>Advisor Code</Form.Label>\n          <Form.Control onChange={e => setAdvisorCode(e.target.value)} style={fontWeight} type=\"text\" placeholder=\"code\" />\n        </Col>\n      </Row>\n      {/* Full Name Section */}\n      <Row className=\"mb-2\">\n        <Col>\n          <Form.Label>Full Name</Form.Label>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <Button onClick={handleFlip} variant=\"outline-secondary\">\n                <i className=\"fas fa-sync-alt\"></i>\n              </Button>\n            </InputGroup.Prepend>\n            <Form.Control onChange={e => setCallerName(e.target.value)} id=\"fullname\" style={fontWeight} type=\"text\" placeholder=\"Lastname, Firstname\" />\n          </InputGroup>\n        </Col>\n      </Row>\n\n      <Row className=\"w-100 m-auto\">\n        <Form.Label>Quick Notes</Form.Label>\n        <Form.Control onChange={e => setCallNotes(e.target.value)} style={fontWeight} as=\"textarea\" rows={3} />\n      </Row>\n      <Row className=\"mb-2\">\n        <Button style={fontWeight} onClick={handleClear} className=\"btn-block btn-info m-3\">\n          Clear All <i className=\"fas fa-eraser\"></i>\n        </Button>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Ticket\n","/home/chris/snap-notes/src/components/Navigation.js",[],"/home/chris/snap-notes/src/components/OutageTracker/OutageList.js",[],"/home/chris/snap-notes/src/components/OutageTracker/OutageDetails.js",[],"/home/chris/snap-notes/src/components/OutageTracker/OutageForm.js",[],"/home/chris/snap-notes/src/contexts/OutageContext.js",[],"/home/chris/snap-notes/src/reducers/OutageReducer.js",[],"/home/chris/snap-notes/src/contexts/ScheduleContext.js",[],"/home/chris/snap-notes/src/components/schedule/ScheduleItems.js",[],"/home/chris/snap-notes/src/components/schedule/ScheduleDropBox.js",["80"],"import React, { useState, useContext } from \"react\"\nimport { ScheduleContext } from \"../../contexts/ScheduleContext\"\n\nimport { Col, InputGroup, Button, Row, Form, Container } from \"react-bootstrap\"\n\nconst ScheduleDropBox = () => {\n  const { updateSchedule } = useContext(ScheduleContext)\n  // Schedule State things\n  const [rawSchedule, setRawSchedule] = useState(\"\")\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    // REGEX filter to parse schedule\n    // currently only catch: phone, break, lunch, coaching\n    let regex_raw_items = /(?<=Investors Group )(.*)|(?= Tech)(.*)|(?= Phone)(.*)|(?= Break)(.*)|(?= Lunch)(.*)|(?= Coaching)(.*)(AM|PM)|(?= Meeting)(.*)(AM|PM)/gm\n    // Grab incoming dropped text and returns RE matches to array\n    let parsedScheduleItems = rawSchedule.match(regex_raw_items)\n    // console.log(coughtScheduleItems)\n    updateSchedule(parsedScheduleItems)\n    // Update state with new array of schedule items\n    // setScheduleItems({ scheduleItems: parsedScheduleItems })\n\n    document.querySelector(\"textarea\").value = \"\"\n  }\n\n  return (\n    <>\n      <Row className=\"m-auto pt-3\">\n        <Container className=\"w-75 p-0\">\n          <Form onSubmit={handleSubmit}>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <Button type=\"submit\" variant=\"outline-secondary\">\n                  {\"Update  \"}\n                  <i className=\"fas fa-sm fa-sync-alt\"></i>\n                </Button>\n              </InputGroup.Prepend>\n              <Form.Control type=\"text\" as=\"textarea\" spellCheck=\"false\" style={{ overflow: \"hidden\", resize: \"none\" }} className=\"drop-schedule bg-secondary\" placeholder=\"drag schedule here\" rows={1} onChange={e => setRawSchedule(e.target.value)} />\n            </InputGroup>\n          </Form>\n        </Container>\n      </Row>\n    </>\n  )\n}\n\nexport default ScheduleDropBox\n","/home/chris/snap-notes/src/contexts/NotesContext.js",["81","82"],"import React, { createContext, useState, useEffect } from \"react\"\n\nexport const CallerNotesContext = createContext()\n\nconst NotesContextProvider = props => {\n  const [notes, setCallerNotes] = useState(() => {\n    const localData = localStorage.getItem(\"notes\")\n    return localData ? JSON.parse(localData) : []\n  })\n\n  const updateSchedule = notes => {\n    setCallerNotes(notes)\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes))\n    return () => {\n      return <CallerNotesContext.Provider value={{ notes }}>{props.children}</CallerNotesContext.Provider>\n    }\n  }, [notes])\n}\nexport default NotesContextProvider\n",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"91","line":11,"column":9,"nodeType":"89","messageId":"90","endLine":11,"endColumn":14},{"ruleId":"87","severity":1,"message":"92","line":13,"column":10,"nodeType":"89","messageId":"90","endLine":13,"endColumn":22},{"ruleId":"87","severity":1,"message":"93","line":14,"column":10,"nodeType":"89","messageId":"90","endLine":14,"endColumn":21},{"ruleId":"87","severity":1,"message":"94","line":15,"column":10,"nodeType":"89","messageId":"90","endLine":15,"endColumn":26},{"ruleId":"87","severity":1,"message":"95","line":16,"column":10,"nodeType":"89","messageId":"90","endLine":16,"endColumn":21},{"ruleId":"87","severity":1,"message":"96","line":17,"column":10,"nodeType":"89","messageId":"90","endLine":17,"endColumn":20},{"ruleId":"87","severity":1,"message":"97","line":18,"column":10,"nodeType":"89","messageId":"90","endLine":18,"endColumn":19},{"ruleId":"87","severity":1,"message":"98","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":13},{"ruleId":"87","severity":1,"message":"99","line":11,"column":9,"nodeType":"89","messageId":"90","endLine":11,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":20,"column":6,"nodeType":"102","endLine":20,"endColumn":13,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'notes' is assigned a value but never used.","'callerUserID' is assigned a value but never used.","'callerPhone' is assigned a value but never used.","'callerPrevTicket' is assigned a value but never used.","'advisorCode' is assigned a value but never used.","'callerName' is assigned a value but never used.","'callNotes' is assigned a value but never used.","'Col' is defined but never used.","'updateSchedule' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.children'. Either include it or remove the dependency array.","ArrayExpression",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [notes, props.children]",{"range":"109","text":"110"},[598,605],"[notes, props.children]"]